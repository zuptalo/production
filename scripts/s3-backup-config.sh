#!/bin/bash

# S3 Backup Configuration Script
# Replaces the NAS discovery script for S3-based backups

set -euo pipefail

LOG_FILE="/var/log/s3-backup-config.log"
CONFIG_FILE="/root/.backup-config"

# Function to log messages
log_message() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$LOG_FILE"
}

echo "========================================"
echo "  S3 Backup Configuration"
echo "========================================"
echo

log_message "=== Starting S3 Backup Configuration ==="

# Check if running as root
if [ "$EUID" -ne 0 ]; then
    echo "✗ This script must be run as root"
    exit 1
fi

echo "Enter your MinIO S3 configuration:"
echo

read -p "S3 Endpoint URL: " S3_ENDPOINT
read -p "Access Key: " S3_ACCESS_KEY
read -s -p "Secret Key: " S3_SECRET_KEY
echo
read -p "Bucket Name: " S3_BUCKET
read -p "Server Hostname [$(hostname)]: " S3_HOSTNAME

# Set hostname default
if [ -z "$S3_HOSTNAME" ]; then
    S3_HOSTNAME=$(hostname)
fi

echo
echo "Testing S3 configuration..."

# Test S3 connection using curl
S3_TEST_URL="${S3_ENDPOINT}/${S3_BUCKET}"

# Create a simple test file
TEST_FILE="/tmp/s3_test_$(date +%s).txt"
echo "S3 connectivity test - $(date)" > "$TEST_FILE"

# Calculate content hash for S3
CONTENT_MD5=$(openssl md5 -binary "$TEST_FILE" | base64)
CONTENT_LENGTH=$(stat -f%z "$TEST_FILE" 2>/dev/null || stat -c%s "$TEST_FILE")

# Create date for S3 auth
DATE=$(date -u "+%a, %d %b %Y %H:%M:%S GMT")

# Create string to sign
STRING_TO_SIGN="PUT\n${CONTENT_MD5}\ntext/plain\n${DATE}\n/${S3_BUCKET}/${S3_HOSTNAME}/connectivity-test.txt"

# Create signature
SIGNATURE=$(echo -n "$STRING_TO_SIGN" | openssl sha1 -hmac "$S3_SECRET_KEY" -binary | base64)

# Test upload
if curl -s -f -X PUT \
    -H "Host: $(echo "$S3_ENDPOINT" | sed 's|https\?://||')" \
    -H "Date: $DATE" \
    -H "Content-Type: text/plain" \
    -H "Content-MD5: $CONTENT_MD5" \
    -H "Content-Length: $CONTENT_LENGTH" \
    -H "Authorization: AWS ${S3_ACCESS_KEY}:${SIGNATURE}" \
    --data-binary "@${TEST_FILE}" \
    "${S3_ENDPOINT}/${S3_BUCKET}/${S3_HOSTNAME}/connectivity-test.txt" >/dev/null; then

    echo "✓ S3 upload test successful"
    log_message "✓ S3 connectivity test passed"
else
    echo "✗ S3 upload test failed"
    log_message "✗ S3 connectivity test failed"
    rm -f "$TEST_FILE"
    exit 1
fi

# Test download
if curl -s -f \
    -H "Host: $(echo "$S3_ENDPOINT" | sed 's|https\?://||')" \
    -H "Date: $(date -u '+%a, %d %b %Y %H:%M:%S GMT')" \
    "${S3_ENDPOINT}/${S3_BUCKET}/${S3_HOSTNAME}/connectivity-test.txt" >/dev/null; then

    echo "✓ S3 download test successful"
    log_message "✓ S3 download test passed"
else
    echo "✗ S3 download test failed"
    log_message "✗ S3 download test failed"
fi

# Cleanup test file
rm -f "$TEST_FILE"

echo
echo "Saving S3 configuration..."

# Save configuration
cat > "$CONFIG_FILE" << EOF
# S3 Backup System Configuration
# Generated by s3-backup-config.sh on $(date)

BACKUP_TYPE="s3"
S3_ENDPOINT="$S3_ENDPOINT"
S3_ACCESS_KEY="$S3_ACCESS_KEY"
S3_SECRET_KEY="$S3_SECRET_KEY"
S3_BUCKET="$S3_BUCKET"
S3_HOSTNAME="$S3_HOSTNAME"
CONFIGURED_DATE="$(date -Iseconds)"

# Legacy variables for compatibility
NAS_IP="s3"
SSH_USER="s3"
REMOTE_BACKUP_DIR="s3://${S3_BUCKET}/${S3_HOSTNAME}"
EOF

chmod 600 "$CONFIG_FILE"
log_message "Configuration saved to $CONFIG_FILE"

echo
echo "========================================"
echo "  Configuration Complete!"
echo "========================================"
echo "S3 Endpoint: $S3_ENDPOINT"
echo "Bucket: $S3_BUCKET"
echo "Hostname Path: $S3_HOSTNAME"
echo "Configuration: $CONFIG_FILE"
echo
echo "Next steps:"
echo "1. Test backup: /root/production/scripts/docker-backup.sh"
echo "2. Test S3 transfer: /root/production/scripts/transfer-backup-to-s3.sh"
echo "3. Run full backup cycle: backup-full-cycle"

log_message "=== S3 Backup Configuration Completed Successfully ==="